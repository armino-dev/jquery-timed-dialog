/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/timed-dialog.js":
/*!*****************************!*\
  !*** ./src/timed-dialog.js ***!
  \*****************************/
/***/ (() => {

eval("(function ($) {\n    $.fn.timedDialog = function (options) {\n        this.defaults = {\n            type: 'info',\n            title: 'Info',\n            body: 'This is the default body text. You might replace this with your own.',\n            width: 320,\n            height: 240,\n            appendTo: 'body',\n            closeOnEscape: true,\n            closeOnTimer: false,\n            timeout: 10, //ten seconds default timeout\n            timeoutAnimation: true,\n            isModal: true,\n            btnDismiss: {\n                text: \"Dismiss\",\n                class: '',\n            },\n            btnConfirm: {\n                text: \"Confirm\",\n                action: () => {\n                    return\n                },\n                class: '',\n            }\n        };\n\n        let settings = $.extend({}, this.defaults, options);\n\n        const body = document.body;\n        const html = document.documentElement;\n\n        const heights = [body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight];\n        const widths = [body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth];\n\n        const documentHeight = Math.max(...heights);\n        const documentWidth = Math.max(...widths);\n\n        const allowedTypes = {\n            info: {\n                icon: {\n                    src: \"i\"\n                },\n                style: 'info',\n            },\n            confirmation: {\n                icon: {\n                    src: \"?\"\n                },\n                style: 'info',\n            }\n        };\n\n        const allowedStyles = ['info', 'warning', 'danger'];\n\n        let animationRequestId = 0;\n\n        settings.icon = allowedTypes[settings.type].icon.src;\n\n        const overlayCss = {\n            'position': 'absolute',\n            'top': 0,\n            'left': 0,\n            'width': documentWidth + 'px',\n            'height': documentHeight + 'px',\n            'z-index': '2000',\n        };\n\n        const dialogCss = {\n            'position': 'absolute',\n            'width': (settings.width + 'px'),\n            'height': (settings.height + 'px'),\n            'line-height': '20px',\n            'z-index': '2001',\n        };\n\n        const random = randomString(5);\n\n        const containerId = 'timed-dialog-' + random;\n\n        const overlay = $(`<div id=\"overlay-${containerId}\" class=\"timed-dialog-overlay\"></div>`);\n\n        const dialog = $(`\n                    <div id=\"${containerId}\" class=\"timed-dialog\">\n                        <div class=\"header\">\n                            <div class=\"icon\"><span>${settings.icon}</span></div>\n                            <h1 class=\"title\">${settings.title}</h1>\n                        </div>\n                        <div class=\"body\">${settings.body}</div>\n                        <div class=\"action\"> </div>\n                    </div>\n            `);\n\n        const btnDismiss = $(`<button \n            class=\"btn btn-primary\" \n            style=\"position:relative;\" \n            id=\"btn-dismiss-${random}\">\n                <span class=\"text\">${settings.btnDismiss.text}</span>\n            </button>\n        `);\n\n        const btnConfirm = $(`<button \n            class=\"btn btn-primary\" \n            id=\"btn-confirm-${random}\">\n                ${settings.btnConfirm.text}\n            </button>\n        `);\n\n        const btnClose = $(`<button id=\"btn-close-${random}\" class=\"btn btn-close\">x</button>`);\n\n        if (this.length > 1) {\n            this.each(function () {\n                $(this).timedDialog(options);\n            });\n\n            return this;\n        }\n\n        /**\n         * Generate a random alphanumeric string\n         * @param  int length      The length of the string to generate\n         * @return string\n         */\n        function randomString(length) {\n            let text = \"\";\n            const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            for (let i = 0; i < length; i++) {\n                text += possible.charAt(Math.floor(Math.random() * possible.length));\n            }\n            return text;\n        }\n\n        function dismissDialog() {\n            if (animationRequestId) {\n                window.cancelAnimationFrame(animationRequestId);\n            }\n\n            $(dialog).fadeOut();\n            $(overlay).fadeOut(500, () => {\n                $(overlay).remove();\n            });\n        }\n\n        $(window).on('resize', () => {\n            redraw();\n        });\n\n        $(document).on('scroll', () => {\n            redraw();\n        });\n\n        function autoClose(counter) {\n            let autoCloseText = $(btnDismiss).children('span.text').html();\n            $(btnDismiss).children('span.text').html(autoCloseText + ` (${counter})`);\n            let timeout = setInterval(() => {\n                counter--;\n                $(btnDismiss).children('span.text').html(autoCloseText + ` (${counter})`);\n                if (counter < 1) {\n                    clearInterval(timeout);\n                    $(btnDismiss).trigger('click');\n                }\n            }, 1000);\n        }\n\n        function bindEvents() {\n            $(btnDismiss).on('click', () => {\n                dismissDialog();\n            });\n\n            $(btnDismiss).on('mouseenter', () => {\n                let meter = $('span.meter');\n                meter.addClass('hover');\n            });\n\n            $(btnDismiss).on('mouseleave', () => {\n                let meter = $('span.meter');\n                meter.removeClass('hover');\n            });\n\n            $(btnClose).on('click', () => {\n                dismissDialog();\n            });\n\n            $(btnConfirm).on('click', () => {\n                if (typeof settings.btnConfirm.action == 'function') {\n                    try {\n                        settings.btnConfirm.action();\n                    } catch (e) {\n                        console.error(e)\n                    }\n                    dismissDialog();\n                } else {\n                    throw new Error('Confirmation button action must be a callback');\n                }\n            });\n\n            $(overlay).on('click', (evt) => {\n                // close only if target is not inside our dialogue\n                // or else the overlay will capture the clicks from\n                // our dialog elements, if any\n                if (dialog.not(evt.target) && dialog.has(evt.target).length === 0) {\n                    dismissDialog();\n                }\n            });\n        }\n\n        function animateTimeout() {\n            const width = $(btnDismiss).width();\n            const meter = $('<span class=\"meter\"></span>');\n            $(meter).appendTo(btnDismiss);\n            const timeDelta = 1000 * settings.timeout;\n            let timedWidth = width;\n            let start;\n\n            const draw = (timestamp) => {\n                if (start === undefined) {\n                    start = timestamp;\n                }\n                const elapsed = timestamp - start;\n\n                $(meter).width(timedWidth);\n\n                timedWidth = width * (1 - elapsed / timeDelta);\n\n                if (elapsed < timeDelta) {\n                    animationRequestId = window.requestAnimationFrame(draw);\n                }\n            }\n\n            animationRequestId = window.requestAnimationFrame(draw);\n        }\n\n        function redraw() {\n            $(overlay).css({\n                'width': documentWidth + 'px',\n                'height': documentHeight + 'px'\n            });\n            $(dialog).css({\n                'left': $(document).scrollLeft() + ($(window).width() - settings.width) / 2 + \"px\",\n                'top': $(document).scrollTop() + ($(window).height() - settings.height) / 2 + \"px\"\n            });\n        }\n\n        this.random = random;\n\n        this.initialize = () => {\n            const isAlreadyOpen = $('.timed-dialog-overlay').length;\n            if (isAlreadyOpen) return;\n\n            $('body').append(overlay);\n\n            if (settings.isModal) {\n                overlay.css(overlayCss);\n            }\n\n            $(dialog).appendTo(overlay);\n            $(dialog).css(dialogCss);\n\n            $(window).trigger('resize');\n            $(btnClose).appendTo(dialog.children('div.header'));\n            $(btnDismiss).appendTo(dialog.children('.action'));\n            if (settings.type == 'confirmation') {\n                $(btnConfirm).appendTo(dialog.children('.action'));\n            }\n\n            bindEvents();\n\n            $(dialog).hide().fadeIn(300, () => {\n                if (settings.closeOnTimer) {\n                    autoClose(settings.timeout);\n                    if (settings.timeoutAnimation) {\n                        animateTimeout();\n                    }\n                }\n            });\n\n            return this;\n        }\n\n        return this.initialize();\n    };\n})(jQuery);\n\n\n//# sourceURL=webpack://@armino-dev/jquery-timed-dialog/./src/timed-dialog.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/timed-dialog.js"]();
/******/ 	
/******/ })()
;